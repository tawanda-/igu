{"version":3,"sources":["components/uploadCSVJournals/index.js","components/viewJournals/index.js","App.js","serviceWorker.js","index.js"],"names":["Dragger","Upload","props","name","multiple","action","onChange","info","status","file","console","log","fileList","message","success","concat","error","UploadCSV","react_default","a","createElement","className","icon","type","Component","columns","dataField","text","editor","Type","TEXTAREA","sort","defaultSorted","order","selectRow","mode","viewJournals","Search","SearchBar","ClearSearchButton","state","rows","onGridRowsUpdated","_ref","fromRow","toRow","updated","_this","setState","slice","i","Object","objectSpread","_this2","this","querystring","require","request","Request","method","headers","Accept","Content-Type","body","stringify","filter","fetch","then","response","json","catch","lib_default","keyField","data","search","cellEdit","cellEditFactory","beforeSaveCell","oldValue","newValue","row","column","done","setTimeout","window","confirm","async","pagination","paginationFactory","Header","Layout","Content","App","layout","Link","to","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3396fc4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Upload, Icon, message } from 'antd';\n//import readXlsxFile from 'read-excel-file';\n//import XLSX from 'xlsx';\n\nlet reader;\n\nconst Dragger = Upload.Dragger;\n\nconst oldprops = {\n\n    customRequest: ({onSuccess, onError, file}) => {\n\n        reader = new FileReader();\n\n        reader.onload = () => {\n\n            console.log(\"On Load\");\n\n        };\n\n        reader.onloadend = () => {\n\n            console.log(\"On Loaddend\");\n\n            var data = reader.result;\n            //var workbook = XLSX.read(data, {type: 'array'});\n\n            //console.log(workbook);\n\n            //let jsonData = JSON.parse(reader.result);\\\n            //console.log(reader.result);\n            //reader.readAsDataURL(reader.result);\n            //readXlsxFile(reader.result, { getSheets: true }).then((sheets) => {\n                // `rows` is an array of rows\n                // each row being an array of cells.\n                //console.log(sheets);\n              //})\n\n        };\n        //reader.readAsDataURL(file);\n        reader.readAsArrayBuffer(file);\n    }\n};\n\nconst props = {\n  name: 'file',\n  multiple: false,\n    //action: 'https://igu-online.org/wp-admin/admin-ajax.php',\n    action: 'http://www.esikolweni.co.za/wp-admin/admin-ajax.php',\n  onChange(info) {\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nclass UploadCSV extends Component{\n\n    render(){\n        return(\n            <Dragger {...props}>\n                <p className=\"ant-upload-drag-icon\">\n                    <Icon type=\"inbox\" />\n                </p>\n                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n            </Dragger>\n        );\n    }\n}\nexport default UploadCSV;","import React, {Component} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nconst columns = [\n    { dataField: 'id' , text: 'id'},\n    { dataField: 'country' , text: 'Country', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'name_of_journal' , text: 'Journal Name', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'print_issn' , text: 'Print ISSN', sort: true},\n\t{ dataField: 'e_issn' , text: 'eISSN', sort: true},\n\t{ dataField: 'city_of_publication' , text: 'City of Publication', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'name_of_publishing_company' , text: 'Publishing Company', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'editor' , text: 'Editor', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'editor_email_address' , text: 'Editor email Addres', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'language' , text: 'Publication language', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'since' , text: 'Since', editor: {type: Type.TEXTAREA}, sort: true},\n\t{ dataField: 'isi' , text: 'ISI', sort: true},\n\t{ dataField: 'isi_category' , text: 'ISI Category', sort: true},\n\t{ dataField: '5_year_impact_factor' , text: '5 Year Impact Factor', sort: true}\n];\n\nconst defaultSorted = [{\n    dataField: 'name_of_journal',\n    order: 'asc'\n  }];\n\nconst selectRow = {\n    mode: 'checkbox'\n  };\n\nconst { SearchBar, ClearSearchButton } = Search;\n\nclass viewJournals extends Component{\n    \n\n    state = {\n        rows:[]\n    };\n\n    componentWillMount(){\n\n        const querystring = require('querystring');\n\n        const searchParams = {\n            action: 'the_ajax_hook',\n            name: 'all',\n            filter: 'all'\n        };\n\n        const request = new Request(\n            'http://www.esikolweni.co.za/wp-admin/admin-ajax.php',{\n                method: 'POST',\n                headers: {'Accept':'*/*', 'Content-Type': 'application/x-www-form-urlencoded'},\n                body: querystring.stringify(searchParams),\n            });\n      \n          return fetch(request)\n          .then(response => response.json())\n          .then(response => {\n              this.setState({rows:response});\n            }\n          ).catch(error => {\n              return error;\n          });\n    }\n\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n        this.setState(state => {\n          const rows = state.rows.slice();\n          for (let i = fromRow; i <= toRow; i++) {\n            rows[i] = { ...rows[i], ...updated };\n          }\n          return { rows };\n        });\n      };\n\n\n    render() {\n\n        return(\n            <div>\n                <BootstrapTable \n                    keyField='id' \n                    data={ this.state.rows } \n                    columns={ columns } \n                    search\n                    cellEdit={ cellEditFactory({ \n                        mode: 'dbclick',\n                        beforeSaveCell: (oldValue, newValue, row, column, done) => {\n                            setTimeout(() => {\n                                if (window.confirm('Do you want to accept this change?')) {\n                                done(true);\n                                //perform query\n                                } else {\n                                done(false);\n                                }\n                            }, 0);\n                            return { async: true };\n                            }\n                    }) }\n                    selectRow={ selectRow }\n                    pagination={ paginationFactory() }\n                    defaultSorted={ defaultSorted } \n                />\n        </div>   \n        );\n    }\n\n}\nexport default viewJournals;","import React, { Component } from 'react';\nimport {Route, Link} from 'react-router-dom';\nimport './App.css';\n\nimport { Layout } from 'antd';\nimport UploadCSV from './components/uploadCSVJournals';\nimport viewJournals from './components/viewJournals';\n\nconst { Header, Content } = Layout;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header>\n            <Link to=\"/viewJournals\">\n              <button>Home</button>\n            </Link>\n            <Link to=\"/viewJournals\">\n              <button>Search Journals</button>\n            </Link>\n            <Link to=\"/upload\">\n              <button>Upload CSV</button>\n            </Link>\n          </Header>\n          <Content>\n              <div>\n                <Route exact path=\"/viewJournals\" component={viewJournals} />\n                <Route exact path=\"/upload\" component={UploadCSV} />\n              </div>\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('wpbody-content'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}